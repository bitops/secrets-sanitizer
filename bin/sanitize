#!/usr/bin/env ruby

# Copyright (C) 2016-Present Pivotal Software, Inc. All rights reserved.
#
# This program and the accompanying materials are made available under
# the terms of the under the Apache License, Version 2.0 (the "License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.Copyright (C) 2016-Present Pivotal Software, Inc. # All rights reserved.
#
# This program and the accompanying materials are made available under
# the terms of the under the Apache License, Version 2.0 (the "License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


lib = File.expand_path('../../lib', __FILE__)
errors = []
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'optparse'
require 'sanitizer'
require 'yaml'

default_pattern_file = File.expand_path(File.join(File.dirname(__FILE__), "../config/catchall"))

options = SecretsSanitizerOptions.new do |opts, options_hash, custom_messages, header|
  opts.on("-pPATTERNFILE", "--pattern-file=PATTERNFILE", "File with regex patterns to match secret keys") do |option|
    options_hash[:pattern_file] = option
  end

  header = "Santize will take secrets and factor them out of a given environment, placing them into a specified secrets cache"
  custom_messages << "-p, --pattern-file  (optional) Pattern file containing secrets patterns"
  custom_messages << "                    config/catchall is used by default"
end

config = SanitizerConfig.new(options[:input][0], options[:sec_dir])

logger = Logger.new(STDERR)
if options[:verbose]
  logger.level = Logger::DEBUG
else
  logger.level = Logger::ERROR
end


if options[:create_config]
  # Duplicate code that should be DRYed up later
  options.check_for_errors!

  begin
    config.create!
  rescue Errno::ENOENT, Errno::ENOTDIR
    logger.error("A config file will only be created if a directory is given as input. Please run this command again without the --create-config or -c option or use a directory as input.")
    exit 1
  end
elsif config.valid?
  if options[:input].empty?
    options[:sec_dir]  = config.secrets_path
    options[:input][0] = config.input_path
  end
elsif config.invalid? && options[:input].empty?
  errors << "Manifest or input directory is required."
end

options[:pattern_file] = default_pattern_file if options[:pattern_file].nil?

options.check_for_errors!



if File.lstat(options[:input][0]).symlink?
  logger.warn("Resolving symlink #{options[:input][0]} to #{File.readlink(options[:input][0])}")
  options[:input][0] = File.readlink(options[:input][0])
end

if File.file?(options[:input][0])
  # it's a file!
  logger.warn "Sanitizing file #{options[:input][0]}..."
  Sanitizer::SanitizeExecutor.execute(options[:input][0], options[:pattern_file], options[:sec_dir], logger)
else
  # do directory
  Dir.glob(File.join(options[:input][0], '**', '*.yml')) do |this_file|
    if File.lstat(this_file).symlink?
      logger.warn "Skipping file #{this_file} because symlinks are skipped in directory mode"
    else
      logger.warn "Sanitizing file #{this_file}..."
      Sanitizer::SanitizeExecutor.execute(this_file, options[:pattern_file], options[:sec_dir], logger)
    end
  end
end
