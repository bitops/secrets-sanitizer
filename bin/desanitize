#!/usr/bin/env ruby

# Copyright (C) 2016-Present Pivotal Software, Inc. All rights reserved.
#
# This program and the accompanying materials are made available under
# the terms of the under the Apache License, Version 2.0 (the "License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.Copyright (C) 2016-Present Pivotal Software, Inc. # All rights reserved.
#
# This program and the accompanying materials are made available under
# the terms of the under the Apache License, Version 2.0 (the "License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.#!/bin/sh


lib = File.expand_path('../../lib', __FILE__)
errors = []
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'optparse'
require 'desanitizer'
require 'yaml'
require 'logger'


def check_for_errors(options, errors)
  if options[:sec_dir].nil?
    errors << "Input secrets directory is required."
  end

  if options[:input].empty?
    errors << "Manifest or input directory is required."
  end
  unless errors.empty?
    errors.each do |error|
      $stderr.puts "ERROR: #{error}"
    end
    exit 1
  end
end

options = SecretsSanitizerOptions.new do |opts, options_hash, custom_messages, header|
  opts.on("-f", "--force", "Attempt to Desanitize even if secret file(s) not present") do
    options_hash[:force] = true
  end

  header = "Desantize will take secrets and place them into a previously sanitized environment"
  custom_messages << "-f  --force         Desanitize files even if files with secrets do not have a matching secret files"
end

config = SanitizerConfig.new(options[:input][0], options[:sec_dir])

if options[:create_config]
  # Duplicate code that should be DRYed up later
  check_for_errors(options, errors)
  config.create!
elsif config.valid?
  if options[:input].empty?
    options[:sec_dir]  = config.secrets_path
    options[:input][0] = config.input_path
  end
elsif config.invalid? && options[:input].empty?
  puts options.display_help(1)
end

check_for_errors(options, errors)

logger = Logger.new(STDERR)
if options[:verbose]
  logger.level = Logger::DEBUG
else
  logger.level = Logger::ERROR
end

if File.lstat(options[:input][0]).symlink?
  logger.warn("Resolving symlink #{options[:input][0]} to #{File.readlink(options[:input][0])}")
  options[:input][0] = File.realdirpath(options[:input][0])
end

if File.file?(options[:input][0])
  # it's a file!
  logger.warn "Desanitizing file #{options[:input][0]}..."
  Desanitizer::DesanitizeExecutor.execute(options[:input][0], options[:sec_dir], logger, options[:force])
elsif File.directory?(options[:input][0])
  # do directory
  Dir.glob(File.join(options[:input][0], '**', '*.yml')) do |this_file|
    if File.lstat(this_file).symlink?
      logger.warn "Skipping file #{this_file} because symlinks are skipped in directory mode"
    else
      logger.warn "Desanitizing file #{this_file}..."
      Desanitizer::DesanitizeExecutor.execute(this_file, options[:sec_dir], logger, options[:force])
    end
  end
else
  logger.error "Filetype parse error"
  exit 1
end

