#!/usr/bin/env ruby
lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'optparse'
require 'desanitizer'
require 'yaml'
require 'logger'

def help exitcode=0
  puts "Desantize will take secrets and place them into a previously sanitized environment"
  puts
  puts "#{$0} [options]"
  puts "-h, --help          Help. See this help message."
  puts "-i, --input         Input manifest file or directory"
  puts "-s, --secret-dir    Folder where all secrets will be read"
  puts "-v, --verbose"
  puts "-m, --manifest      [deprecated] Input manifest file"
  puts "-d, --input-dir     [deprecated] Input Directory containing yaml with secrets"
  exit exitcode
end

if ARGV.empty?
  help 1
end

options = {}
OptionParser.new do |opts|
  options[:input] = []
  opts.banner = "Usage: #{$0} [options]"

  opts.on("-h", "--help", "Help") do
    help
  end

  opts.on("-iINPUT", "--input=INPUT", "Input file or directory") do |option|
    options[:input] << option
  end

  opts.on("-sSECRETDIR", "--secret-dir=SECRETDIR", "Secret file directory") do |option|
    options[:sec_dir] = option
  end

  opts.on("-mMANIFEST", "--manifest=MANIFEST", "Manifest yaml") do |option|
    # options[:manifest] = option
    options[:input] << option
  end

  opts.on("-dINPUT_DIR", "--input-dir=INPUTDIR", "Input directory of yaml files") do |option|
    # options[:input_dir] = option
    options[:input] << option
  end

  opts.on("-v", "--verbose") do
    options[:verbose] = true
  end
end.parse!

errors = []
if options[:input].count > 1
  errors << "Only specify one input manifest/directory!"
end

if options[:sec_dir].nil?
  errors << "Output secrets directory is required."
end

if options[:input].empty?
  errors << "Manifest or input directory is required."
end


unless errors.empty?
  errors.each do |error|
    $stderr.puts "ERROR: #{error}"
  end
  exit 1
end


logger = Logger.new(STDERR)
if options[:verbose]
  logger.level = Logger::DEBUG
else
  logger.level = Logger::ERROR
end

if File.file?(options[:input][0])
  # it's a file!
  Desanitizer::DesanitizeExecutor.execute(options[:input][0], options[:sec_dir], logger)
else
  # do directory
  Dir.glob(File.join(options[:input][0], '**', '*.yml')) do |f|
    logger.warn "Desanitizing file #{f}..."
    Desanitizer::DesanitizeExecutor.execute(f, options[:sec_dir], logger)
  end
end

